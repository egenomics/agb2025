nextflow_pipeline {
    name "16S Microbiome Pipeline Stress Tests"
    script "main.nf"

    // Test 1: Low Quality Reads - Should handle gracefully
    test("Should process low quality reads without failure") {
        when {
            params {
                run_id = "stress_test_low_quality"
            }
            profile = "docker"
        }

        then {
            assert workflow.success
            assert path("${params.outdir}").exists()
            assert path("${params.outdir}/qiime2").exists()
            // Should produce some output even with low quality
            assert file("${params.outdir}/logs/pipeline.log").text.contains("low quality") || workflow.success
        }
    }

    // Test 2: Very Low Read Count - Edge case testing
    test("Should handle samples with very low read counts") {
        when {
            params {
                run_id = "stress_test_low_reads"
            }
            profile = "docker"
        }

        then {
            assert workflow.success || workflow.failed
            // Should either succeed or fail gracefully with informative error
            if (workflow.failed) {
                assert workflow.errorMessage.contains("insufficient reads") || 
                       workflow.errorMessage.contains("low read count")
            }
        }
    }

    // Test 3: High Sample Count - Scalability test
    test("Should scale to high number of samples (100+ samples)") {
        when {
            params {
                run_id = "stress_test_high_samples"
                max_memory = "16.GB"
                max_cpus = 8
            }
            profile = "docker"
        }

        then {
            assert workflow.success
            assert path("${params.outdir}/qiime2/feature_table.tsv").exists()
            assert path("${params.outdir}/qiime2/taxonomy.tsv").exists()
            // Check that all samples were processed
            def feature_table = file("${params.outdir}/qiime2/feature_table.tsv").text
            assert feature_table.split('\n').size() > 100  // Should have many features
        }
    }

    // Test 4: High Read Depth - Memory stress test
    test("Should handle high read depth samples without memory issues") {
        when {
            params {
                run_id = "stress_test_high_depth"
                max_memory = "32.GB"
            }
            profile = "docker"
        }

        then {
            assert workflow.success
            assert path("${params.outdir}/qiime2").exists()
            // Check memory usage didn't exceed limits
            assert !workflow.errorMessage.contains("OutOfMemoryError")
            assert !workflow.errorMessage.contains("memory")
        }
    }

    // Test 5: Mixed Quality Samples - Realistic scenario
    test("Should handle mixed quality samples in same run") {
        when {
            params {
                run_id = "stress_test_mixed_quality"
            }
            profile = "docker"
        }

        then {
            assert workflow.success
            // Should process all samples despite quality differences
            def summary = file("${params.outdir}/qiime2/results_summary.html")
            assert summary.exists()
        }
    }

    // Test 6: Deblur vs DADA2 Comparison - Algorithm stress test
    test("Should complete successfully with deblur denoiser") {
        when {
            params {
                run_id = "stress_test_deblur"
                denoiser = "deblur"
            }
            profile = "docker"
        }

        then {
            assert workflow.success
            assert path("${params.outdir}/qiime2/feature_table.tsv").exists()
            assert path("${params.outdir}/qiime2/rep_seqs.fasta").exists()
        }
    }

    // Test 7: Corrupted Files - Error handling test
    test("Should fail gracefully with corrupted input files") {
        when {
            params {
                run_id = "stress_test_corrupted"
            }
            profile = "docker"
        }

        then {
            // Should fail but with meaningful error messages
            assert workflow.failed
            assert workflow.errorMessage.contains("corrupted") || 
                   workflow.errorMessage.contains("invalid") ||
                   workflow.errorMessage.contains("malformed")
        }
    }

    // Test 8: Resource Limitation - Memory constraint test
    test("Should handle limited memory gracefully") {
        when {
            params {
                run_id = "stress_test_limited_memory"
                max_memory = "4.GB"
                max_cpus = 2
            }
            profile = "docker"
        }

        then {
            // Should either complete or fail with memory-related error
            if (workflow.failed) {
                assert workflow.errorMessage.contains("memory") || 
                       workflow.errorMessage.contains("OutOfMemory")
            } else {
                assert workflow.success
                assert path("${params.outdir}/qiime2").exists()
            }
        }
    }

    // Test 9: Extreme Edge Case - Single sample
    test("Should handle single sample analysis") {
        when {
            params {
                run_id = "stress_test_single_sample"
            }
            profile = "docker"
        }

        then {
            assert workflow.success
            assert path("${params.outdir}/qiime2/feature_table.tsv").exists()
            // Single sample should still produce valid outputs
            def feature_table = file("${params.outdir}/qiime2/feature_table.tsv").text
            assert feature_table.contains("Sample001")
        }
    }

    // Test 10: Maximum Scalability - Large dataset simulation
    test("Should handle maximum realistic dataset size") {
        when {
            params {
                run_id = "stress_test_max_scale"
                max_memory = "64.GB"
                max_cpus = 16
                max_time = "24.h"
            }
            profile = "docker"
        }

        then {
            assert workflow.success
            assert path("${params.outdir}/qiime2").exists()
            // Should complete within time limit
            assert workflow.duration.toMillis() < 24 * 60 * 60 * 1000  // 24 hours in milliseconds
        }
    }

    // Test 11: RNA sequences (should fail or handle appropriately)
    test("Should handle RNA sequences appropriately") {
        when {
            params {
                run_id = "stress_test_rna"
            }
            profile = "docker"
        }

        then {
            // Should either convert RNA to DNA or fail gracefully
            if (workflow.failed) {
                assert workflow.errorMessage.contains("RNA") || 
                       workflow.errorMessage.contains("invalid nucleotide")
            } else {
                assert workflow.success
            }
        }
    }

    // Test 12: File format validation
    test("Should validate input file formats correctly") {
        when {
            params {
                run_id = "stress_test_format_validation"
            }
            profile = "docker"
        }

        then {
            // Should validate file formats and provide meaningful errors
            if (workflow.failed) {
                assert workflow.errorMessage.contains("format") || 
                       workflow.errorMessage.contains("invalid") ||
                       workflow.errorMessage.contains("compressed")
            }
        }
    }
}

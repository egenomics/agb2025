/******************************************************************
 *                AGB2025 â€“ Nextflow configuration               *
 *                      (Docker)                         *
 ******************************************************************/

manifest {
  name        = 'egenomics/agb2025'
  author      = 'AGB2025'
  homePage    = 'https://github.com/egenomics/agb2025'
  description = 'Pipeline for AGB2025 project'
  version     = '1.0.0'
}

/* ---------- Container profile ---------- */
profiles {
  docker {
    docker.enabled  = true
    docker.registry = 'quay.io'
    /* container tag picked from each nf-core module */
    process.container = { task -> task.module?.container ?: 'docker.io/agb2025-python' }

    process.executor  = 'local'

    /* make files created in the container owned by you */
    docker.runOptions = '-u $(id -u):$(id -g)'
  }
}

/* ---------- Global parameters ---------- */
params {
  run_id    = null  //
  outdir    = "runs/${params.run_id}"
  metadata  = "runs/${params.run_id}/metadata/metadata.csv"
  classifier_db = "databases/silva-138-99-nb-classifier.qza"
  denoiser = 'dada2'
  kraken2_db = "databases/k2_Human_20230629"
  trim_left_f = 0 // DADA2: Forward read left trimming (trims primers)
  trim_left_r = 0 // DADA2: Reverse read left trimming (trims primers)
  trunc_len_f = 240 // DADA2: Forward read truncation length ### depends on the demux report!!!!!!
  trunc_len_r = 180 // DADA2: Reverse read truncation length
  }

/* ---------- Generic process settings (apply to every task) ---------- */
process {
  publishDir = [
    path   : { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
    mode   : 'copy',
    saveAs : { fn -> fn == 'versions.yml' ? null : fn }
  ]
}

/* ---------- Per-process ---------- */
process {

  withName: 'FASTQC_RAW' {
    publishDir = [
      path    : "${params.outdir}/qc/raw",
      mode    : 'copy',
      pattern : "*.{html,zip}"
    ]
  }

  withName: 'FASTQC_TRIM' {
    publishDir = [
      path    : "${params.outdir}/qc/trimmed",
      mode    : 'copy',
      pattern : "*.{html,zip}"
    ]
  }

  withName: 'TRIMMOMATIC' {
    publishDir = [
      [ path: "${params.outdir}/trimmed_reads", mode: 'copy', pattern: "*.fastq.gz" ],
      [ path: "${params.outdir}/logs/trimmomatic", mode: 'copy', pattern: "*.{log,summary}" ]
    ]
    /* Extra Trimmomatic arguments */
    ext.args2 = 'ILLUMINACLIP:group2a/adapters/TruSeq3-PE-2.fa:2:30:10 LEADING:20 TRAILING:20 SLIDINGWINDOW:4:20 MINLEN:187'
  }

  withName: 'KRAKEN.*' {
    memory = '8 GB'
  }

  withLabel: 'qiime2' {
    container = 'quay.io/qiime2/amplicon:2024.10'
    cpus = 4
    memory = '8 GB'
  }

  /*
  ========================================================================================
    QIIME2-specific PUBLISH DIRECTORY DEFINITIONS
  ----------------------------------------------------------------------------------------
  */

  withName: 'IMPORT_READS' {
    publishDir = [ path: "${params.outdir}/qiime2/01_artifacts_input", mode: 'copy', pattern: "*.qza" ]
  }

  withName: 'SUMMARIZE_DEMUX' {
    publishDir = [ path: "${params.outdir}/qiime2/01_artifacts_input", mode: 'copy', pattern: "*.qzv" ]
  }

  withName: 'SUGGEST_TRUNCATION_LENGTHS' {
    publishDir = [ path: "${params.outdir}/qiime2/00_reports", mode: 'copy' ]
  }

  withName: 'DENOISE_DADA2|DENOISE_DEBLUR' {
    publishDir = [ path: "${params.outdir}/qiime2/02_denoised", mode: 'copy', pattern: "*.qza" ]
  }

  withName: 'SUMMARIZE_TABLE|SUMMARIZE_SEQS' {
    publishDir = [ path: "${params.outdir}/qiime2/03_summaries", mode: 'copy', pattern: "*.qzv" ]
  }

  withName: 'CLASSIFY_TAXONOMY' {
    publishDir = [ path: "${params.outdir}/qiime2/04_taxonomy", mode: 'copy', pattern: "*.qza" ]
  }

  withName: 'BUILD_TREE' {
    publishDir = [ path: "${params.outdir}/qiime2/05_phylogeny", mode: 'copy', pattern: "*.qza" ]
  }

  withName: 'ALPHA_DIVERSITY' {
      publishDir = [ path: "${params.outdir}/qiime2/06_diversity", mode: 'copy' ]
  }

  withName: 'EXPORT_.*' { // This regex catches all your export processes
    publishDir = [ path: "${params.outdir}/qiime2/exported_results", mode: 'copy' ]
  }

  withName: 'CREATE_RESULTS_SUMMARY' {
    publishDir = [ path: "${params.outdir}", mode: 'copy' ] // Publish to top-level output dir

  }

  withName: 'MERGE_METADATA_MULTIQC_PROCESS' {
  container = 'docker.io/agb2025-python' // local image
}

 withName: 'HOMO_CONTAM_PROCESS' {
  container = 'docker.io/agb2025-python' // local image
}

 withName: 'CLASSIFY_QUALITY_PROCESS' {
  container = 'docker.io/agb2025-python' // local image
}





}
